Given an integer array nums, return all the triplets [nums[i], nums[j], nums[k]] such that i != j, i != k, and j != k, and nums[i] + nums[j] + nums[k] == 0.

Notice that the solution set must not contain duplicate triplets.

Example:
Input: nums = [-1,0,1,2,-1,-4]
Output: [[-1,-1,2],[-1,0,1]]

Solution:
1. First sort the array
2. Now for every nums[i], use 2 pointers start = i+1, and end = nums.size() - 1, and check if (nums[i] + nums[start] + nums[end] == 0),
3. If true, store {i, start, end} in resultant vector.
4. else if sum is greater than 0, then do end--,
5. else if sum is lesser than 0, than do start++.
6. if number at start and start+1 index is same then increment the index , similarly if number at end and end - 1 index are same then decrement the index. 
